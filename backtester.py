# import matplotlib.pyplot as plt

# class Backtester:
#     def __init__(self, strategy, data):
#         self.strategy = strategy
#         self.data = data

#     def run_backtest(self):
#         # Apply the strategy and gather signals
#         self.strategy.execute(self.data)
#         # Example: Compare predicted vs actual, calculate profit/loss
#         self.plot_results()

#     def plot_results(self):
#         # Example plotting results of backtest
#         plt.plot(self.data['Close'], label='Actual Price')
#         # You could add simulated trades here
#         plt.legend()
#         plt.show()


# class Backtester:
#     def __init__(self, strategy, data):
#         self.strategy = strategy
#         self.data = data

#     def run_backtest(self):
#         # Apply the strategy (e.g., ElliottWave)
#         self.strategy.detect_waves()
#         self.strategy.label_waves()
#         self.strategy.plot_labeled_waves()

#         # Simulate buy/sell based on wave patterns
#         # For example, buy at troughs, sell at peaks
#         initial_balance = 1000  # Start with $1000
#         balance = initial_balance
#         position = 0  # No open position at the start

#         for idx, wave_type, label in self.strategy.waves:
#             if "trough" in wave_type and position == 0:  # Buy at trough
#                 position = balance / self.data['Close'][idx]
#                 balance = 0
#                 print(f"Buying at {self.data['Close'][idx]}")
#             elif "peak" in wave_type and position > 0:  # Sell at peak
#                 balance = position * self.data['Close'][idx]
#                 position = 0
#                 print(f"Selling at {self.data['Close'][idx]}")
        
#         profit = balance - initial_balance
#         print(f"Backtesting complete. Final Balance: {balance}, Profit: {profit}")





# BreakoutStrategy

# import matplotlib.pyplot as plt

# class Backtester:
#     def __init__(self, strategy, data):
#         self.strategy = strategy
#         self.data = data
#         self.performance = {
#             'trades': 0,
#             'wins': 0,
#             'losses': 0,
#             'pnl': 0.0,
#             'entry_points': [],
#             'exit_points': []
#         }

#     def run_backtest(self):
#         """
#         Run the backtest and simulate trades based on signals generated by the strategy.
#         """
#         self.strategy.execute()
#         signals = self.strategy.signals

#         entry_price = None
#         for signal in signals:
#             date, price, signal_type = signal

#             if signal_type == 'Buy' and entry_price is None:
#                 entry_price = price
#                 self.performance['entry_points'].append((date, price))
#                 self.performance['trades'] += 1
#             elif signal_type == 'Sell' and entry_price is not None:
#                 pnl = price - entry_price
#                 self.performance['pnl'] += pnl
#                 self.performance['exit_points'].append((date, price))
#                 entry_price = None

#                 if pnl > 0:
#                     self.performance['wins'] += 1
#                 else:
#                     self.performance['losses'] += 1

#         return self.performance

#     def plot_results(self):
#         """
#         Plot the data and the entry/exit points on the price chart.
#         """
#         plt.plot(self.data['Close'], label='Close Price')
#         for entry in self.performance['entry_points']:
#             plt.scatter(entry[0], entry[1], color='green', label='Buy Signal', marker='^')
#         for exit_point in self.performance['exit_points']:
#             plt.scatter(exit_point[0], exit_point[1], color='red', label='Sell Signal', marker='v')
#         plt.legend()
#         plt.show()




# FibonacciStrategy


import matplotlib.pyplot as plt

class Backtester:
    def __init__(self, strategy, data):
        self.strategy = strategy
        self.data = data
        self.performance = {
            'trades': 0,
            'wins': 0,
            'losses': 0,
            'pnl': 0.0,
            'entry_points': [],
            'exit_points': []
        }

    def run_backtest(self):
        """
        Run the backtest and simulate trades based on signals generated by the strategy.
        """
        self.strategy.execute()  # Executes the strategy logic to generate buy/sell signals
        signals = self.strategy.signals

        entry_price = None
        for signal in signals:
            date, price, signal_type = signal

            if signal_type == 'Buy' and entry_price is None:
                entry_price = price
                self.performance['entry_points'].append((date, price))
                self.performance['trades'] += 1
            elif signal_type == 'Sell' and entry_price is not None:
                pnl = price - entry_price
                self.performance['pnl'] += pnl
                self.performance['exit_points'].append((date, price))
                entry_price = None

                if pnl > 0:
                    self.performance['wins'] += 1
                else:
                    self.performance['losses'] += 1

        return self.performance

    def plot_results(self):
        """
        Plot the data and the entry/exit points on the price chart.
        """
        plt.plot(self.data['Close'], label='Close Price')
        for entry in self.performance['entry_points']:
            plt.scatter(entry[0], entry[1], color='green', label='Buy Signal', marker='^')
        for exit_point in self.performance['exit_points']:
            plt.scatter(exit_point[0], exit_point[1], color='red', label='Sell Signal', marker='v')
        plt.legend()
        plt.show()
